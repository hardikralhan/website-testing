<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Site-wide Audit Report</title>
  <style>
    /* Page & body setup */
    @page {
      margin: 10mm 8mm;
      @bottom-center {
        content: "Page " counter(page) " of " counter(pages);
        font-size: 10px;
        color: #666;
      }
    }
    body {
      margin: 0;
      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
      color: #333;
      line-height: 1.4;
    }
    .container {
      padding: 10px 5px;
      max-width: none;
    }
  
    /* Headings */
    h1 { font-size:28px; color:#0056b3; text-align:center; margin-bottom:20px; }
    h2 { font-size:22px; color:#0056b3; border-bottom:2px solid #ddd; padding-bottom:5px; margin:40px 0 20px; }
    h3 { font-size:18px; color:#0056b3; margin:20px 0 10px; }
  
    /* Tables */
    table {
      width:100%;
      border-collapse:collapse;
      page-break-inside:auto;
      margin-bottom:20px;
    }
    tr {
      page-break-inside:avoid;
      page-break-after:auto;
    }
    th, td {
      border:1px solid #ccc;
      padding:8px;
      font-size:13px;
      vertical-align:top;
      /* allow long words or URLs to wrap */
      overflow-wrap: break-word;
      word-break: break-word;
      white-space: normal;
    }
    th {
      background:#0056b3;
      color:#fff;
      text-align:left;
    }
    tr:nth-child(even) td {
      background:#f9f9f9;
    }
  
    /* Pre/code blocks inside tables: preserve formatting but wrap long lines */
    pre, code {
      display:block;
      background:#f0f0f0;
      padding:5px;
      border-radius:3px;
      font-size:12px;
      white-space: pre-wrap;
      overflow-wrap: break-word;
      word-break: break-word;
      margin:0;
    }
  
    /* Lists */
    ul, ol { margin:10px 0 20px 20px; }
    li { margin-bottom:5px; font-size:14px; }
  
    /* Links */
    a { color:#0056b3; text-decoration:none; }
    a:hover { text-decoration:underline; }
  
    /* Highlight boxes */
    .score { background:#e6f2ff; padding:5px; border-radius:3px; font-weight:bold; }
    .error { background:#ffcccc; padding:5px; border-radius:3px; color:#b30000; }
  
    /* Section breaks */
    .section { page-break-after:always; }
    .section:last-child { page-break-after:auto; }
  
    /* Semantic coloring */
    .score.good { color:green; }
    .score.needs-improvement { color:orange; }
    .score.poor { color:red; }
  
    .impact-minor    { background:#e6ffe6; }
    .impact-moderate { background:#fff5e6; }
    .impact-serious  { background:#ffe6e6; }
    .impact-critical { background:#ffcccc; }
  </style>
  
  
</head>

<body>
  <div class="container">
    <% for (const link of Object.keys(allResults)) { 
         const results = allResults[link]; %>
    <div class="section">
      <h1>Audit Report for <%= link %></h1>

      <!-- Accessibility -->
      <h2>Accessibility</h2>
      <% if (results.accessibility.error) { %>
      <p class="error">Error: <%= results.accessibility.error %></p>
      <% } else if (results.accessibility && results.accessibility.violations) { %>
      <% if (results.accessibility.violations.length) { %>
      <h3>Violations</h3>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Impact</th>
            <th>WCAG</th>
            <th>Remediation</th>
            <th>Details</th>
          </tr>
        </thead>
        <tbody>
          <% results.accessibility.violations.forEach(v => { %>
          <tr class="impact-<%= v.impact.toLowerCase() %>">
            <td><%= v.id %></td>
            <td><%= v.description %></td>
            <td><%= v.impact || 'N/A' %></td>
            <td><%= v.wcag.join(', ') %></td>
            <td><%= v.remediation || 'Refer to help URL' %></td>
            <td>
              <ul>
                <% v.nodes.forEach(node => { %>
                <li>
                  <strong>Target:</strong> <code><%= node.target.join(', ') %></code><br>
                  <strong>HTML:</strong>
                  <pre><%= node.html %></pre>
                  <strong>Failure:</strong> <%= node.failureSummary.replace(/\n/g, '<br>') %>
                </li>
                <% }) %>
              </ul>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No accessibility violations detected.</p>
      <% } %>
      <% if (results.accessibility.passes && results.accessibility.passes.length) { %>
      <h3>Passes</h3>
      <ul>
        <% results.accessibility.passes.forEach(p => { %>
        <li>
          <strong><%= p.id %>:</strong> <%= p.description %>
        </li>
        <% }) %>
      </ul>
      <% } %>
      <% } else { %>
      <p class="error">Accessibility data unavailable.</p>
      <% } %>

      <!-- Grammar -->
      <h2>Grammar</h2>
      <% if (results.grammar.error) { %>
      <p class="error">Error: <%= results.grammar.error %></p>
      <% } else if (results.grammar.issues && results.grammar.issues.length) { %>
      <table>
        <thead>
          <tr>
            <th>Context</th>
            <th>Suggestion</th>
            <th>Message</th>
          </tr>
        </thead>
        <tbody>
          <% results.grammar.issues.forEach(issue => { %>
          <tr>
            <td><%= issue.context %></td>
            <td><%= issue.suggestion %></td>
            <td><%= issue.message %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No grammar issues detected.</p>
      <% } %>

      <!-- SEO -->
      <h2>SEO</h2>
      <% if (results.seo.error) { %>
      <p class="error">Error: <%= results.seo.error %></p>
      <% } else if (results.seo) { %>
      <h3>Meta Information</h3>
      <ul>
        <li><strong>Title:</strong> <%= results.seo.meta.title %></li>
        <li><strong>Description:</strong> <%= results.seo.meta.description %></li>
      </ul>
      <h3>Headings</h3>
      <% const hd = results.seo.headings; %>
      <ul>
        <% ['h1','h2','h3','h4','h5','h6'].forEach(tag => { %>
        <li>
          <strong><%= tag.toUpperCase() %>:</strong> <%= hd[tag].count %>
          <% if (hd[tag].details.length) { %>
          <ul>
            <% hd[tag].details.forEach(item => { %>
            <li>Position <%= item.position %>: <%= item.text %></li>
            <% }) %>
          </ul>
          <% } %>
        </li>
        <% }) %>
      </ul>
      <% if (hd.structureIssues && hd.structureIssues.length) { %>
      <h4>Heading Structure Issues</h4>
      <ul>
        <% hd.structureIssues.forEach(issue => { %>
        <li><%= issue %></li>
        <% }) %>
      </ul>
      <% } %>
      <h3>Images</h3>
      <ul>
        <li><strong>Total Images:</strong> <%= results.seo.images.total %></li>
        <li><strong>Missing Alt Text:</strong> <%= results.seo.images.missingAlt.length %>
          <% if (results.seo.images.missingAlt.length) { %>
          <ul>
            <% results.seo.images.missingAlt.forEach(src => { %>
            <li><%= src %></li>
            <% }) %>
          </ul>
          <% } %>
        </li>
        <li><strong>Empty Alt Text:</strong> <%= results.seo.images.emptyAlt.length %>
          <% if (results.seo.images.emptyAlt.length) { %>
          <ul>
            <% results.seo.images.emptyAlt.forEach(src => { %>
            <li><%= src %></li>
            <% }) %>
          </ul>
          <% } %>
        </li>
      </ul>
      <h3>Canonical Tag</h3>
      <p><%= results.seo.canonical.href %></p>
      <h3>Structured Data</h3>
      <p><strong>Present:</strong> <%= results.seo.structuredData.present ? 'Yes' : 'No' %></p>
      <% if (results.seo.structuredData.details.length) { %>
      <h4>Details</h4>
      <ul>
        <% results.seo.structuredData.details.forEach(detail => { %>
        <li><%= detail %></li>
        <% }) %>
      </ul>
      <% } %>
      <h3>Links</h3>
      <ul>
        <li><strong>Total Links:</strong> <%= results.seo.links.total %></li>
        <li><strong>Broken Links:</strong> <%= results.seo.links.broken.length %>
          <% if (results.seo.links.broken.length) { %>
          <ul>
            <% results.seo.links.broken.forEach(link => { %>
            <li><%= link %></li>
            <% }) %>
          </ul>
          <% } %>
        </li>
      </ul>
      <% } else { %>
      <p class="error">SEO data unavailable.</p>
      <% } %>

      <!-- Performance -->
      <h2>Performance</h2>
      <% if (results.performance.error) { %>
      <p class="error">Error: <%= results.performance.error %></p>
      <% } else if (results.performance) { %>
      <p class="score <%= results.performance.performanceScore.category.toLowerCase().replace(' ', '-') %>">
        Score: <%= results.performance.performanceScore.score %>
        (<%= results.performance.performanceScore.category %>)
      </p>
      <p><%= results.performance.performanceScore.description %></p>
      <h3>Load Times</h3>
      <ul>
        <li>Time to Interactive: <%= results.performance.pageLoadTime.interactive %></li>
        <li>First Contentful Paint: <%= results.performance.pageLoadTime.firstContentfulPaint %></li>
      </ul>
      <p><%= results.performance.pageLoadTime.description %></p>
      <h3>Unsized Images</h3>
      <% if (results.performance.unsizedImages && results.performance.unsizedImages.length) { %>
      <table>
        <thead>
          <tr>
            <th>Image URL</th>
            <th>Snippet</th>
            <th>Recommendation</th>
          </tr>
        </thead>
        <tbody>
          <% results.performance.unsizedImages.forEach(img => { %>
          <tr>
            <td><a href="<%= img.url %>"><%= img.url %></a></td>
            <td>
              <pre><%= img.snippet %></pre>
            </td>
            <td><%= img.recommendation %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No unsized images detected.</p>
      <% } %>
      <h3>HTTP Requests</h3>
      <p><%= results.performance.httpRequests.description %></p>
      <ul>
        <li><strong>Total Requests:</strong> <%= results.performance.httpRequests.count %></li>
        <li><strong>Threshold:</strong> <%= results.performance.httpRequests.threshold %></li>
        <li><strong>Excessive:</strong> <%= results.performance.httpRequests.excessive ? 'Yes' : 'No' %></li>
      </ul>
      <% if (results.performance.httpRequests.details && results.performance.httpRequests.details.length) { %>
      <h4>Request Details by Resource Type</h4>
      <table>
        <thead>
          <tr>
            <th>Type</th>
            <th>Count</th>
            <th>Sample URLs (Transfer Size kb)</th>
          </tr>
        </thead>
        <tbody>
          <% results.performance.httpRequests.details.forEach(d => { %>
          <tr>
            <td><%= d.type %></td>
            <td><%= d.count %></td>
            <td>
              <ul>
                <% d.samples.forEach(s => { %>
                <li><a href="<%= s.url %>"><%= s.url %></a> (<%= s.sizeKB %>)</li>
                <% }) %>
              </ul>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } %>
      <h3>Render-Blocking Resources</h3>
      <p><%= results.performance.renderBlocking.description %></p>
      <% if (results.performance.renderBlocking.resources.length) { %>
      <ul>
        <% results.performance.renderBlocking.resources.forEach(r => { %>
        <li><a href="<%= r.url %>"><%= r.url %></a>: <%= r.recommendation %></li>
        <% }) %>
      </ul>
      <% } %>
      <h3>Caching</h3>
      <p><strong>Status:</strong> <%= results.performance.caching.status %></p>
      <p><%= results.performance.caching.description %></p>
      <% } else { %>
      <p class="error">Performance data unavailable.</p>
      <% } %>

      <!-- UI -->
      <h2>UI</h2>
      <% if (results.ui.error) { %>
      <p class="error">Error: <%= results.ui.error %></p>
      <% } else if (results.ui.report) { %>
      <h3>Inconsistent Fonts</h3>
      <% if (results.ui.report.inconsistentFonts.length) { %>
      <table>
        <thead>
          <tr>
            <th>Text</th>
            <th>Location</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <% results.ui.report.inconsistentFonts.forEach(item => { %>
          <tr>
            <td><%= item.text %></td>
            <td><%= item.location %></td>
            <td><%= item.description %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No font inconsistencies detected.</p>
      <% } %>
      <h3>Inconsistent Colors</h3>
      <% if (results.ui.report.inconsistentColors.length) { %>
      <table>
        <thead>
          <tr>
            <th>Element</th>
            <th>Location</th>
            <th>Affected Text</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <% results.ui.report.inconsistentColors.forEach(item => { %>
          <tr>
            <td><%= item.element %></td>
            <td><%= item.location %></td>
            <td><%= item.affectedText || '—' %></td>
            <td><%= item.description %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No color inconsistencies detected.</p>
      <% } %>
      <h3>Inconsistent Button Styles</h3>
      <% if (results.ui.report.inconsistentButtonStyles.length) { %>
      <table>
        <thead>
          <tr>
            <th>Button</th>
            <th>Location</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <% results.ui.report.inconsistentButtonStyles.forEach(item => { %>
          <tr>
            <td><%= item.button %></td>
            <td><%= item.location %></td>
            <td><%= item.description %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No button style inconsistencies detected.</p>
      <% } %>
      <h3>Poor Whitespace</h3>
      <% if (results.ui.report.poorWhitespace.length) { %>
      <table>
        <thead>
          <tr>
            <th>Section</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <% results.ui.report.poorWhitespace.forEach(item => { %>
          <tr>
            <td><%= item.section %></td>
            <td><%= item.description %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No whitespace issues detected.</p>
      <% } %>
      <% } else { %>
      <p class="error">UI data unavailable.</p>
      <% } %>

      <!-- Mobile -->
      <h2>Mobile</h2>
      <% if (results.mobile.error) { %>
      <p class="error">Error: <%= results.mobile.error %></p>
      <% } else if (results.mobile) { %>
      <% [
        ['responsivenessIssues', 'Responsiveness Issues'],
        ['overlappingElements', 'Overlapping Elements'],
        ['cutOffContent', 'Cut-Off Content'],
        ['tapTargetIssues', 'Tap Target Issues']
      ].forEach(([key, title]) => {
        const arr = results.mobile[key] || [];
      %>
      <h3><%= title %></h3>
      <% if (arr.length) { %>
      <table>
        <thead>
          <tr>
            <th>Description</th>
            <th>Location</th>
            <th>Affected Elements</th>
          </tr>
        </thead>
        <tbody>
          <% arr.forEach(item => { %>
          <tr>
            <td><%= item.description %></td>
            <td><%= item.location %></td>
            <td><%= item.affectedElements || '—' %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <% } else { %>
      <p>No <%= title.toLowerCase() %> detected.</p>
      <% } %>
      <% }) %>
      <% } else { %>
      <p class="error">Mobile data unavailable.</p>
      <% } %>
    </div>
    <% } %>
  </div>
</body>

</html>